package web.game.util;

import java.awt.Point;
import java.io.BufferedReader;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import web.game.language.Translate;

import org.json.JSONException;
//import org.json.JSONObject;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class Util {
	static java.util.Random random = new java.util.Random(System.currentTimeMillis());
	public static int randomGaussian(int min,int max){
		return (int)(min + random.nextDouble() * (max - min));
	}
    /**
     * 随机1个数。从begin开始到end结束。包括begin。不包括end
     * @param begin
     * @param end
     * @return
     */
    public static int getRandomInt(int begin,int end) {
    	return randomGaussian(begin, end);
	}
    
	public static String translateString(String s, String[][] keyValues) {
		try {
			HashMap<String, String> map = new HashMap<String, String>();
			if(keyValues != null && keyValues.length > 0){
				for(int i = 0; i < keyValues.length; i++){
					map.put(keyValues[i][0], keyValues[i][1]);
				}
			}
			StringBuffer sb = new StringBuffer();
			char cs[] = s.toCharArray();
			char dota = '#';
			int firstDota = -1;
			for( int i=0;i< cs.length;i++){
				if(firstDota< 0){
					if( cs[i] == dota){
						firstDota = i;
					}else{
						sb.append(cs[i]);
					}
				}else{
					if( cs[i] == dota){					
						String key = new String(cs,firstDota,i-firstDota+1);
						String value = (String)map.get(key);
						if(value!= null){
							sb.append(value);
							firstDota = -1;
						}else{
							sb.append(key);
							firstDota = i;
						}
					}
				}
			}
			if( firstDota>=0 && firstDota< cs.length){
				sb.append(new String(cs,firstDota,cs.length-firstDota));
			}
			
			return sb.toString();
		} catch(Exception e) {
			return null;
		}
	}
    
    
    
    
    
    public static String Join(String[] s,String s1){
    	if(s!=null && s.length>0){
        	String s2=s[0];
        	for (int i = 1; i < s.length; i++) {
        		s2=s2+s1+s[i];
    		}
        	return s2;
    	}else{
    		return "";
    	}
    }
    public static String Join(int[] s,String s1){
    	if(s!=null && s.length>0){
        	String s2=String.valueOf(s[0]);
        	for (int i = 1; i < s.length; i++) {
        		s2=s2+s1+s[i];
    		}
        	return s2;
    	}else{
    		return null;
    	}
    }
    
    public static String Join(long[] s,String s1){
    	if(s!=null && s.length>0){
        	String s2=String.valueOf(s[0]);
        	for (int i = 1; i < s.length; i++) {
        		s2=s2+s1+s[i];
    		}
        	return s2;
    	}else{
    		return null;
    	}
    }
    public static String Join(List<String> list,String s1){
    	if(list!=null && list.size()>0){
        	String s2=list.get(0);
        	for (int i = 1; i < list.size(); i++) {
        		s2=s2+s1+list.get(i);
    		}
        	return s2;
    	}else{
    		return "";
    	}
    }
    
    public static String Join2(List<Integer> list,String s1){
    	if(list!=null && list.size()>0){
        	String s2=list.get(0)+"";
        	for (int i = 1; i < list.size(); i++) {
        		s2=s2+s1+list.get(i);
    		}
        	return s2;
    	}else{
    		return "";
    	}
    }
    public static String Join(Map<Integer,Integer> mapone,String s1){
    	if(mapone!=null && mapone.size()>0){
        	/*String s2=list.get(0)+"";
        	for (int i = 1; i < list.size(); i++) {
        		s2=s2+s1+list.get(i);
    		}*/
    		String s2="";
    		for (Integer in : mapone.keySet()) {
    			int value=mapone.get(in);
    			s2+=value+",";
			}
    		if(s2.substring(s2.length()-1, s2.length()).equals(",")){
    			s2=s2.substring(0, s2.length()-1);
    		}
        	return s2;
    	}else{
    		return "";
    	}
    }
    public static List<Integer> Tolist(String str,String s1){
    	if(str!=null && !str.equals("")){
    		String[] str2=str.split(s1);
    		List<Integer> list=new ArrayList<Integer>();
    		for (int i = 0; i < str2.length; i++) {
    			list.add(Integer.valueOf(str2[i]));
			}
        	return list;
    	}else{
    		return null;
    	}
    }
    //判断数组中是否含有该函数；
    public static int hasin(String[] S,String flag){
    	if(S!=null){
        	for (int i = 0; i < S.length; i++) {
        		if(flag.equals(S[i])){
        			return 1;
        		}
    		}	
    	}
    	return 0;
    }
    //判断数组中是否含有该函数；
    public static int hasin(int[] S,int flag){
    	if(S!=null){
        	for (int i = 0; i < S.length; i++) {
        		if(S[i]==flag){
        			return 1;
        		}
    		}	
    	}
    	return 0;
    }
    //判断数组中是否含有该函数；
    public static int hasin(long[] S,long flag){
    	if(S!=null){
        	for (int i = 0; i < S.length; i++) {
        		if(S[i]==flag){
        			return 1;
        		}
    		}	
    	}
    	return 0;
    }
	public static int[] vder(int num,int neednum){
		int m=neednum;
		int a[]=new int[num];
		
		int c[]=new int[m];
		for (int i = 0; i < num; i++) {
			a[i]=i;
		}
		if(num==neednum){
			return a;
		}
		boolean r[]=new boolean[a.length]; 
		Random random = new Random();
		
		int n = 0;
		while(true)
		{
		int temp = random.nextInt(num);
			if(!r[temp])
				{
				if(n == m) //取到足量随机数后退出循环
					//System.out.println(temp+"---");
					break;
					
					r[temp] = true;
					c[n]=temp;
					n ++;
				}
		 }
		return c;
	}
	//对数组进行排序；
	public static int[] vderorder(int num,int neednum){
		int[] s=vder(num,neednum);
		Arrays.sort(s);
		return s;
	}
	
	
	
	
    //时间对比
    public static int time(SimpleDateFormat simple,String starttime,String endtime,String nowtime){
    	Calendar star = Calendar.getInstance();
		Calendar end = Calendar.getInstance();
		Calendar now = Calendar.getInstance();
		int error=0;
    	try {
			now.setTime(simple.parse(nowtime));
			star.setTime(simple.parse(starttime));
			end.setTime(simple.parse(endtime));
			if (now.compareTo(star) < 0) {
				error=1;
				return error;
			} 
			if (now.compareTo(end) > 0) {
				error=1;
				return error;
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
    	return error;
    }
    
    //时间对比   暂时还未加上type的逻辑
    public static int time(SimpleDateFormat simple,String starttime,String endtime,String nowtime,int type){
    	Calendar star = Calendar.getInstance();
		Calendar end = Calendar.getInstance();
		Calendar now = Calendar.getInstance();
		int error=0;
    	try {
			now.setTime(simple.parse(nowtime));
			star.setTime(simple.parse(starttime));
			end.setTime(simple.parse(endtime));
			if (now.compareTo(star) < 0) {
				error=1;
				return error;
			} 
			if (now.compareTo(end) > 0) {
				error=1;
				return error;
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
    	return error;
    }
	public static int getviplv(int total){
		int[] vip={0,10,100,300,500,1000,2000,5000,10000,30000,50000,80000,120000};
		for (int i = 1; i < vip.length; i++) {
			if(total>=vip[i-1] && total<vip[i]){
				return i-1;
			}
		}
		if(total>=vip[vip.length-1]){
			return vip.length-1;
		}
		return 0;
	}
	public static String delone(String s1,String s2){
		List<String> list=new ArrayList<String>();
		if(s1==null || "".equals(s1)){
			return s1;
		}else{
			String[] s1list=s1.split(",");
			for (int i = 0; i < s1list.length; i++) {
				if(!s2.equals(s1list[i])){
					list.add(s1list[i]);
				}	
			}
			String[] array = new String[list.size()];
			String[] s=list.toArray(array);
			return Join(s,",");
		}
	}
	public static String addone(String s1,String s2){
		if(s1==null || "".equals(s1)){
			s1=s2;
		}else{
			s1=s1+","+s2;
		}
		return s1;
	}
	public static String addone(String s1,int s2){
		if(s1==null || "".equals(s1)){
			s1=String.valueOf(s2);
		}else{
			s1=s1+","+s2;
		}
		return s1;
	}
	
	public static int[] addone(int[] s,int num){
		int[] k=new int[s.length+1];
		for (int i = 0; i < k.length; i++) {
			if(i<s.length){
				k[i]=s[i];
			}
		}
		k[s.length]=num;
		return k;
	}
	
    public static String  resetdaygrowth(String daygrowth){
    	//daygrowth="2,30,4,51";
    	if(daygrowth!=null && !"".equals(daygrowth)){
    		String[] ss=daygrowth.split(",");  // 1,2,3,4;  2,3,4,-1
    		//ss[0]=ss[1];
    		//ss[1]=ss[2];
    		//ss[2]=ss[3];		
    		//ss[3]=String.valueOf(-1);
    		for (int i = 0; i < ss.length; i++) {
    			if(i<ss.length-1){
    				ss[i]=ss[i+1];
    				if(i==ss.length-2 && "-1".equals(ss[i])){
    					ss[i]=String.valueOf(0);
    				}
    			}
			}
    		ss[ss.length-1]=String.valueOf(-1);
    		daygrowth=Util.Join(ss,",");
    		//System.out.println(daygrowth);
    		return daygrowth;
    	}
    	return null;
    }
	/**
	 * 传入字符串获得时间戳
	 * date_str:2018-05-01
	 * format:yyyy-MM-dd
	 */
    public static long dateTimeStamp(String date_str,String format){  
        try {  
            SimpleDateFormat sdf = new SimpleDateFormat(format);  
            return sdf.parse(date_str).getTime()/1000;  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
        return (long)0;  
    }
    /**
	 * 传入字符串获得时间戳
	 * date_str:2018-05-01
	 * format:yyyy-MM-dd
	 */
    public static long dateTimeStamp2(String date_str,String format){  
        try {
        	if(date_str==null || date_str.equals("") || date_str.equals("0")){
        		return (long)0;  
        	}
            SimpleDateFormat sdf = new SimpleDateFormat(format);  
            return sdf.parse(date_str).getTime();  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
        return (long)0;  
    }
    //返回某年某月天数
    public static int maxday(int year,int month){  
    	Calendar time=Calendar.getInstance(); 
    	time.clear(); 
    	time.set(Calendar.YEAR,year); 
    	//year年
    	time.set(Calendar.MONTH,month-1);
    	//Calendar对象默认一月为0,month月            
    	int day=time.getActualMaximum(Calendar.DAY_OF_MONTH);//本月份的天数
    	return day;
    }
    /**
     * 传入字符串日期，获得相差天数
     * yyyy-MM-dd
     */
    public static long dayDiff(String date1, String date2,String format) {
		SimpleDateFormat formater = new SimpleDateFormat(format);
		long diff=0l;
		try {
			long d1 = formater.parse(date1).getTime();
			long d2 = formater.parse(date2).getTime();
			//diff=(Math.abs(d1-d2) / (1000 * 60 * 60 * 24));
			diff=(d1-d2)/(1000 * 60 * 60 * 24)+1;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return diff;
	}
    
    //时间戳返回相差天数；
    public static long dayDifflongtime(long time1, long time2) {
    	//time1 开始时间；
    	//time2结束时间
    	
    	String s1=Util.getDate(time1, 2);
    	long timestart=Util.getLongTime(s1,1);
    	
		String s2=Util.getDate(time2, 2);
		long nowtime2=Util.getLongTime(s2,1);
		int day=(int) ((nowtime2-timestart)/86400000);
		return day+1;
	}
    
    
    //返回相差的天数
	public static int returnyearday(Date date1,Date date2){
		 	Calendar cal1 = Calendar.getInstance();
	        cal1.setTime(date1);
	        
	        Calendar cal2 = Calendar.getInstance();
	        cal2.setTime(date2);
	        int day1= cal1.get(Calendar.DAY_OF_YEAR);
	        int day2 = cal2.get(Calendar.DAY_OF_YEAR);
	        
	        int year1 = cal1.get(Calendar.YEAR);
	        int year2 = cal2.get(Calendar.YEAR);
	        if(year1 != year2)   //同一年
	        {
	            int timeDistance = 0 ;
	            for(int i = year1 ; i < year2 ; i ++)
	            {
	                if(i%4==0 && i%100!=0 || i%400==0)    //闰年            
	                {
	                    timeDistance += 366;
	                }
	                else    //不是闰年
	                {
	                    timeDistance += 365;
	                }
	            }
	            
	            return timeDistance + (day2-day1) ;
	        }
	        else    //不同年
	        {
	            //System.out.println("判断day2 - day1 : " + (day2-day1));
	            return day2-day1;
	        }
	}
    /*
     *时间格式
     * 2015-02-18 00:00:00
     * */
	public static String[] delone(String s[] ,int key){
		String[] s1=new String[s.length-1];
		int k=0;
		for (int i = 0; i < s.length; i++) {
			if(i!=key){
				s1[k]=s[i];
				k++;
			}
		}
		return s1;
	}
	public static String getDate(long time,int type){
		String t = "";
		if(type == 0){
			t = "MM-dd HH:mm";
		}else if(type == 1){
			t = "yyyy-MM-dd";
		}else if(type == 2){
			t = "yyyy-MM-dd HH:mm:ss";
		}else if(type == 3){
			t = "yyyy-MM-dd HH:mm";
		}else if(type == 4){
			t = "HH:mm";
		}else if(type == 5){
			t = "M月d日 HH:mm";
		}else if(type==6){
			t = "yyyyMMdd";
		}
		String date = new SimpleDateFormat(t).format(new Date(time));
		return date;
	}
	
	public static long getLongTime(String time,int type){
		String t = "";
		if(type == 0){
			t = "yyyy-MM-dd HH:mm:ss";
		}else if(type == 1){
			t = "yyyy-MM-dd";
		}else if(type == 2){
			t = "yyyy-MM-dd HH:mm";
		}
		SimpleDateFormat sbf =new SimpleDateFormat(t);
	    Date ddate;
		try {
			ddate = sbf.parse(time);
			return ddate.getTime();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}
	
	public static int randomone(String s){
		String[] nums=s.split(",");
		int randomnum=Util.getRandomInt(0, 10000)+1;
		int k=0;
		for (int i = 0; i < nums.length; i++) {
			int start=0;
			if(i>0){
				start=Integer.valueOf(nums[i-1]);
			}
			int end=Integer.valueOf(nums[i]);
			if(randomnum>start && randomnum<=end){
				k=i;
			}
		}
		return k;
	}
	

	
	public static boolean isOpenTime(String open,String end){
		String time = Util.getDate(System.currentTimeMillis(), 2);
		if(time.compareTo(open) > 0 && end.compareTo(time) > 0){
			return true;
		}
		return false;
	}
	//计算两个坐标点之间的距离
	public static double getdistance(int a,int b,int c,int d){
		Point p1 = new Point(a, b);// 定义第一个点的坐标(5,5),或者你自己设置x,y坐标
		Point p2 = new Point(c,d);// 定义第一个点的坐标(5,5),或者你自己设置x,y坐标
		// 两点间距离
		double jili = Math.sqrt(Math.abs((p1.getX() - p2.getX())
		* (p1.getX() - p2.getX())+(p1.getY() - p2.getY())
		* (p1.getY() - p2.getY())));
		//System.out.println("两点间的距离是:" + jili);
		return jili;
	}
	
	//随机红包；
	public static List<Integer> redEnvelopes(int money,int count){
		RedEnvelopes red=new RedEnvelopes();
		List<Integer> list=red.spiltRedPackets(money,count);
		return list;
	}
	
	//当天剩余时间；
	public static long remaintimeday(int type){
		long nowtime=System.currentTimeMillis();
		String s1=Util.getDate(nowtime, 2);
		long nowtime3=Util.getLongTime(s1,1);
		if(type==0){
			return nowtime3+86400*1000-nowtime;
		}else if(type==1){
			//当前时间；
			int hourTime=Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
			if(hourTime<3){
				return nowtime3+3600*3*1000-nowtime;
			}else{
				return nowtime3+(3600*3+86400)*1000-nowtime;
			}
		}
		return 0;
	}
	
	public static String UtilBigDecimal(String a,String b,int type){
		BigDecimal bignum1 = new BigDecimal(a);  
		BigDecimal bignum2 = new BigDecimal(b); 
		BigDecimal bignum3 = null;  
		if(type==0){//+
			bignum3 =  bignum1.add(bignum2);      
		}else if(type==2){//-
			bignum3 = bignum1.subtract(bignum2);  
		}else if(type==3){//*
			bignum3 = bignum1.multiply(bignum2);  
		}else if(type==4){///
			bignum3 = bignum1.divide(bignum2);  
		}
		return bignum3.toString();
	}
	
	
	
	
	
	
	
    public static void main(String[] args) {
//    	String s=Util.UtilBigDecimal("1222320000000000000000000000000000000000000122232000000000000"
//    			
//    			+ "0000000000000000000000000122232000000000000000000000000000000000000012223200000000000000000000000000000000000001222320000000000000000000000000000000000000122232000000000000000000000000000000000000012223200000000000000000000000000000000000001222320000000000000000000000000000000000000122232000000000000000"
//    			
//    			
//    			
//    			
//    					
//+ "1222320000000000000000000000000000000000000122232000000000000000000000000000000000000012223200000000000000000000000000000000000001222320000000000000000000000000000000000000122232000000000000000000000000000000000000012223200000000000000000000000000000000000001222320000000000000000000000000000000000000122232000000000000000000000000000000000000012223200000000000000000000000000000000000001222320000000000000000000000000000000000000122232000000000000000000000000000000000000012223200000000000000000000000000000000000001222320000000000000000000000000000000000000122232000000000000000000000000000000000000012223200000000000000000000000000000000000001222320000000000000000000000000000000000000122232000000000000000000000000000000000000012223200000000000000000000000000000000000001222320000000000000000000000000000000000000122232000000000000000000000000000000000000012223200000000000000000000000000000000000001222320000000000000000000000000000000000000122232000000000000000000000000000000000000012223200000000000000000000000000000000000001222320000000000000000000000000000000000000"










//    			
//    					
//    					
//    					
//    					
//    					
//    					
//    					
//    					
//    					
//    					+ "3333333333233333333333332333333333333323323232323333333333333333333332333333333333323333333333333233232323233333333333333333333323333333333333233333333333332332323232333333333333333333333233333333333332333333333333323323232323333333333333333333332333333333333323333333333333233232323233333333333333333333323333333333333233333333333332332323232333333333333333333333233333333333332333333333333323323232323333333333333333333332333333333333323333333333333233232323233333333333333333333323333333333333233333333333332332323232333333333333333333333233333333333332333333333333323323232323333333333333333333332333333333333323333333333333233232323233333333333333333333323333333333333233333333333332332323232333333333333333333333233333333333332333333333333323323232323333333333333333333332333333333333323333333333333233232323233333333333333333333323333333333333233333333333332332323232333333333333333333333233333333333332333333333333323323232323333333333333333333332333333333333323333333333333233232323233333333333333333333323333333333333233333333333332332323232333"
//    					
//    					
//    					
//    					
//    					
//    					
//    					
//    					
//    					
//    	System.out.println(s.length());
    	
//    	for (double i = 1000; i < 1100; i++) {
//    		System.out.println(i+"<br>");
//    		BigDecimal bigDecimal = new BigDecimal(Math.pow(2, i));
//    		System.out.println(bigDecimal.toString());
//        	System.out.println(bigDecimal.toString().length());
//		}
    	
    	 
    	 
    	
//    	for (int i = 0; i < 1000; i++) {
//    		System.out.println(Util.redEnvelopes(88, 10));
//		}
//    	 int chapter=21;
//    	 
//    	 int a=(int) Math.ceil(Math.pow((double)chapter/5, 0.5));
//    	 
//    	 System.out.println(a);
//    	 
//    	 
//    	 String s="";
//    	 String s1[]=s.split(":");
//    	System.out.println(Integer.valueOf(s1[1]));
//    	 int chapter=20;
//    	 long timelogin=28700l;
//		 double hour=(double)timelogin/3600-6;
//		 System.out.println(hour);
//		 
//		 int num1=(int) (Math.pow((double)chapter/5, 0.3)*hour);
//		 int num2=(int)((150+chapter*12)*hour);
//		 
//		 System.out.println(num2);
		 
//    	String s1=Util.getDate(System.currentTimeMillis(), 2);
//        long lingchen=Util.getLongTime(s1,1);//当前凌晨的时间
//    	System.out.println(lingchen);
    	
    	//long starttime=System.currentTimeMillis();
    	//String s=Util.getDate(System.currentTimeMillis(), 1);
    	//long time=Util.getLongTime(s, 1);
    	//System.out.println(time);
    	
    	
    	
    	
    	//long endtime=2;
    	//System.out.println(dayDifflongtime(starttime,System.currentTimeMillis()));
    	//System.out.println(getDate(starttime,6));
    	
//    	Gson gson=new Gson();
    	//String url="http://webgame.wenyoyo.com/Crossserver/testaa";
    	
//    	String url="http://webgame.wenyoyo.com/Crossserver/praise/playerid/1088800000000039";
//    	String getreturn=SendgetManager.SendGET(url);
//    	System.out.println(getreturn);
//    	//JsonNewResult<Integer> sreturn=gson.fromJson(getreturn, new TypeToken<JsonNewResult<Integer>>(){}.getType());
//    	JsonNewResult<Integer> sreturn=gson.fromJson(getreturn, new TypeToken<Integer>(){}.getType());
//    	System.out.println(sreturn.getData());
    	
//    	int a=5;
//    	int b=3;
//    	System.out.println((int)Math.ceil((double)a/b));
//    	
//    	
//    	
//    	
//    	
//    	
//    	String s="ss";
//    	
//    	System.out.println(Integer.valueOf(s));
//    	
//    	
//    	
//    	
//    	
//    	
//    	
//    	
//    	 int[] addviplv=new int[60];
//		for (int i = 0; i < addviplv.length; i++) {
////			if(i==0){
////				addviplv[i]=100;
////			}else{
////				int s2=(int) Math.ceil(Math.pow(i,1.5)/10);
////				int needexp=addviplv[i-1]+s2*30;
////				addviplv[i]=needexp;
////			}
//			if(i<14){
//				addviplv[i]=150*(i+1);
//			}else{
//				addviplv[i]=addviplv[i-1]+300;
//			}
//		//System.out.println(addviplv[i]+"@@@@@@@@@@@@@@@@@@@"+i);	
//		}
//		System.out.println(Arrays.toString(addviplv));
//    	String articles="1000006:500";
//    	if(!"".equals(articles)){
//    		String[] articesall=articles.split(",");
//    	}
//    	System.out.println(Math.min(16,12));
//			
//		String url="http://webgame.wenyoyo.com/gameApi/getGoodsByCode";
//		String getreturn=SendgetManager.SendGET(url);
//		JSONObject json = JSONObject.fromObject(getreturn); 
//		int error=json.getInt("status");
//		if(error==0){
//			String goods=json.getString("data");
//			JSONArray jsonArray = JSONArray.fromObject(goods); 
//		}
		
		
		
		
		
//		System.out.println(getreturn);
//		 try {
//				JSONObject obj = new JSONObject(getreturn);
//				String s=obj.optString("goods");
//				System.out.println(s);
//				JSONArray jsonArray = JSONArray.fromObject(s);  
//				for (int i = 0; i < jsonArray.size(); i++) {
//					jsonArray.getJSONObject(i).get(key);
//				}
////				int status=obj.optInt("goods");
////				if(status==0){
////					JSONObject personObject = obj.getJSONObject("data");
////					int id=personObject.optInt("id");
////					System.out.println(id);
////				}
//		  } catch (JSONException e) {
//			    e.printStackTrace();
//		  }
    	
    	
    	
//    	resetdaygrowth(resetdaygrowth(resetdaygrowth("2,30,4,51")));
//    	 StringBuilder sqlSb = new StringBuilder();
//    	 sqlSb.append("223b");
//    	 sqlSb.append("223bc");
//    	 System.out.println(sqlSb.toString());
    	
    	//resetdaygrowth();
//    	System.out.println(1%5);
//    	System.out.println(Calendar.getInstance().get(Calendar.DAY_OF_WEEK));
//    	String articles="";
//    	String[] articesall=articles.split(",");
//    	for (int i = 0; i < articesall.length; i++) {
//    		if(articesall[i]!=null && !"".equals("")){
//    			System.out.println(articesall[i]+"####");
//    		}
//		}
/*		String getreturn=SendGET("http://webgame.wenyoyo.com/webgame/checkUser?username=C846U5451046");
		 try {
			JSONObject obj = new JSONObject(getreturn);
			
			int status=obj.optInt("status");
			
			if(status==0){
				JSONObject personObject = obj.getJSONObject("data");
				int id=personObject.optInt("id");
				System.out.println(id);
			}
			
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
    	
//    	double f=1.8;
//    	int s=(int) f;
//    	System.out.println(Math.ceil(1.8));
//    	System.out.println(s);
//    	System.out.println(Math.round(5.5644555));
//    	
//    	
//    	
//    	
//    	
//    	for (int i = 1; i <= 30; i++) {
//    		int k=(int) Math.round((Math.pow(i,1.3)))*100;
//        	System.out.println(k);
//		}
    	
    	
    	
    	//int[] s={0,2,3};
    	//System.out.println(Arrays.toString(addone(s, 6)));
    	
    	//int[] s=vderorder(10,5);
    	//System.out.println(Arrays.toString(s));
    	//System.out.println(getRandomInt(30,60));
    	
    	//char s=1;
    	//System.out.println(s);
    	
    	
    	
    	//Long a=124l;
    	//Long[] s={123l,234l};
    	//long b=123l;
    	//System.out.println(hasin(s, a));
//    	String s1="1,2,3,4,5";
//    	String s2="5";
    	//System.out.println(indrawings(s1,s2));
/*    	System.out.println(getviplv(160000));
    	SimpleDateFormat simple = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    	String starttime="2017-12-19 00:00:00";
    	String endtime="2017-12-20 00:00:00";
    	Date currentTime = new Date();// 当前时间
		String nowtime = simple.format(currentTime);
		System.out.println(time(simple, starttime, endtime, nowtime));
		int day = Game.PUBLIC_CAL.get(Calendar.DAY_OF_YEAR);
		System.out.println(day);*/
	}
    /**
     * 返回当前时间到第二天凌晨毫秒数
     * @param currentDate 当前时间
     * @return
     */
    public static Integer getRemainSecondsOneDay(Date currentDate) {
        Calendar midnight=Calendar.getInstance();
        midnight.setTime(currentDate);
        midnight.add(midnight.DAY_OF_MONTH,1);
        midnight.set(midnight.HOUR_OF_DAY,0);
        midnight.set(midnight.MINUTE,0);
        midnight.set(midnight.SECOND,0);
        midnight.set(midnight.MILLISECOND,0);
        Integer seconds=(int)((midnight.getTime().getTime()-currentDate.getTime())/1000);
        return seconds*1000;
    }
    
}
